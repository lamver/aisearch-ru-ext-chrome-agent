// –í content.js

chrome.storage.sync.get([window.location.hostname], (result) => {
    const isEnabled = result[window.location.hostname];

    if (isEnabled === false) {
        return;
    }

    initAgent();
});

function collectExternalFilesByType() {
        const files = {
            images: [],
            videos: [],
            scripts: [],
            styles: [],
            others: []
        };

        // –ü–æ–ª—É—á–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏
        // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - <img src="...">
        document.querySelectorAll('img[src]').forEach(img => {
            const url = img.src;
            files.images.push({ name: getFileNameFromUrl(url), url });
        });

        // –í–∏–¥–µ–æ - <video src="..."> –∏ –≤–Ω—É—Ç—Ä–∏ <source src="...">
        document.querySelectorAll('video[src]').forEach(video => {
            const url = video.src;
            files.videos.push({ name: getFileNameFromUrl(url), url });
        });
        document.querySelectorAll('video source[src]').forEach(source => {
            const url = source.src;
            files.videos.push({ name: getFileNameFromUrl(url), url });
        });

        // –°–∫—Ä–∏–ø—Ç—ã - <script src="...">
        document.querySelectorAll('script[src]').forEach(script => {
            const url = script.src;
            files.scripts.push({ name: getFileNameFromUrl(url), url });
        });

        // –°—Ç–∏–ª–∏ - <link rel="stylesheet" href="...">
        document.querySelectorAll('link[rel="stylesheet"][href]').forEach(link => {
            const url = link.href;
            files.styles.push({ name: getFileNameFromUrl(url), url });
        });

        // –î—Ä—É–≥–∏–µ –≤–Ω–µ—à–Ω–∏–µ —Ñ–∞–π–ª—ã ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ <a href="..."> —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ—Ç–¥–∞–ª–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã—à–µ
        // –î–ª—è —ç—Ç–æ–≥–æ –≤–æ–∑—å–º–µ–º –≤—Å–µ <a> —Å href –æ—Ç–ª–∏—á–Ω—ã–º –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –¥–æ–º–µ–Ω–∞ (–≤–Ω–µ—à–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã)
        document.querySelectorAll('a[href]').forEach(a => {
            const url = a.href;
            if (!url) return;

            // –ï—Å–ª–∏ url —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏–º
            if (isUrlInFiles(url, files)) return;

            // –ï—Å–ª–∏ —ç—Ç–æ –≤–Ω–µ—à–Ω–∏–π url (–ø—Ä–æ—Ç–æ–∫–æ–ª http(s), —Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —Ö–æ—Å—Ç)
            if (new URL(url).origin !== location.origin) {
                files.others.push({ name: getFileNameFromUrl(url), url });
            }
        });

        return files;

        // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        function getFileNameFromUrl(url) {
            try {
                const urlObj = new URL(url);
                const pathname = urlObj.pathname;
                const name = pathname.substring(pathname.lastIndexOf('/') + 1) || url;
                return name;
            } catch {
                return url;
            }
        }

        function isUrlInFiles(url, filesObj) {
            return Object.values(filesObj).some(arr => arr.some(file => file.url === url));
        }
    }

// –§—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ —Ç–∏–ø—É
function renderFilesList(filesList, type) {
    const modalScenario = document.getElementById('my-unique-modal-v1');
    const container = modalScenario.shadowRoot.getElementById('fileListContainer');
    container.innerHTML = '';

    let filesToShow = [];
    if (type === 'all') {
        // –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—Ä–∞–∑—É
        filesToShow = Object.values(filesList).flat();
    } else {
        filesToShow = filesList[type] || [];
    }

    if (filesToShow.length === 0) {
        container.textContent = '–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞.';
        return;
    }

    const ul = document.createElement('ul');
    ul.style.listStyle = 'none';
    ul.style.padding = '0';

    filesToShow.forEach(file => {
        const li = document.createElement('li');
        li.style.marginBottom = '10px';
        li.style.display = 'flex';
        li.style.alignItems = 'center';
        li.style.gap = '10px';

        // –ü—Ä–µ–≤—å—é (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
        const preview = document.createElement('div');
        preview.style.width = '50px';
        preview.style.height = '50px';
        preview.style.flexShrink = '0';

        if (type === 'images') {
            const img = document.createElement('img');
            img.src = file.url;
            img.alt = file.name;
            img.style.maxWidth = '100%';
            img.style.maxHeight = '100%';
            preview.appendChild(img);
        } else if (type === 'videos') {
            const video = document.createElement('video');
            video.src = file.url;
            video.controls = false;
            video.muted = true;
            video.style.maxWidth = '100%';
            video.style.maxHeight = '100%';
            preview.appendChild(video);
        } else {
            const ext = file.name.split('.').pop()?.toLowerCase() || '';
            // –î–ª—è —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏ —Å—Ç–∏–ª–µ–π –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–∫–æ–Ω–∫–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç
            let icon = document.createElement('span');
            icon.style.fontSize = '24px';
            icon.style.lineHeight = '50px';
            switch (ext) {
                case 'js':
                    icon.textContent = 'üìú';
                    break;
                case 'css':
                    icon.textContent = 'üé®';
                    break;
                default:
                    icon.textContent = 'üìÑ';
            }
            preview.appendChild(icon);
        }

        li.appendChild(preview);

        // –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Å—Å—ã–ª–∫–æ–π
        const link = document.createElement('a');
        link.href = file.url;
        link.textContent = file.name;
        link.target = '_blank';
        link.rel = 'noopener noreferrer';
        link.download = file.name; // –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        link.style.flexGrow = '1';
        link.style.wordBreak = 'break-all';

        li.appendChild(link);

        // –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∞—Ç—å (—Å –∑–∞–≥—Ä—É–∑–∫–æ–π –ø–æ –∫–ª–∏–∫—É)
        const downloadBtn = document.createElement('button');
        downloadBtn.textContent = '–°–∫–∞—á–∞—Ç—å';
        downloadBtn.onclick = (e) => {
            e.preventDefault();
            downloadFile(file.url, file.name);
        };
        li.appendChild(downloadBtn);

        ul.appendChild(li);
    });

    container.appendChild(ul);
}

// –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ —Å—Å—ã–ª–∫–µ
function downloadFile(url, filename) {
    fetch(url, {mode: 'cors'})
        .then(resp => resp.blob())
        .then(blob => {
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = filename;
            document.body.appendChild(link);
            link.click();
            link.remove();
            setTimeout(() => URL.revokeObjectURL(link.href), 1000);
        })
        .catch(() => alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª.'));
}

async function initAgent() {
    const imageUrlLogo40X40 = chrome.runtime.getURL('images/logo_ai_search_40_40.png');
    console.log(imageUrlLogo40X40);
    let lastInputElmInitExecuteTask= null;
    let lastSelectedEditableElement = null;
    let modalScenario = null;
    let originalPosition = { x: 0, y: 0 }; // –ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    let moveBackTimeout = null;
    let lastTaskContent = null;

    // –°–æ–∑–¥–∞–µ–º shadow root –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, —á—Ç–æ–±—ã –Ω–µ –≤–ª–∏—è—Ç—å –Ω–∞ —Å—Ç–∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const container = document.createElement('div');
    container.id = 'aiSearch-draggable-container';
    container.style.all = 'initial'; // —Å–±—Ä–æ—Å–∏–º –≤—Å–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏
    container.style.position = 'fixed';
    container.style.width = '40px';
    container.style.height = '40px';
    container.style.zIndex = '9999999';  // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –Ω–∞–≤–µ—Ä—Ö—É
    container.style.cursor = 'grab';
    container.style.boxShadow = '0 2px 6px rgba(0, 0, 0, 0.15)';
    container.style.borderRadius = '15px';
    container.style.transition = 'left 0.3s ease, top 0.3s ease';


    // –ü–æ–ø—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–∑ chrome.storage.local (–∏–ª–∏ fallback)
    const storageKey = `aiSearch-position-${window.location.hostname}`;
    chrome.storage.sync.get([storageKey], (posResult) => {
        const pos = posResult[storageKey];
        let x, y;

        if (pos && typeof pos.x === 'number' && typeof pos.y === 'number') {
            x = pos.x;
            y = pos.y;
        } else {
            // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
            x = window.innerWidth - 40; // –Ω–µ–º–Ω–æ–≥–æ –æ—Ç—Å—Ç—É–ø–∏—Ç—å –æ—Ç –∫—Ä–∞—è
            y = window.innerHeight - 40;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å
        const rect = container.getBoundingClientRect();
        const containerWidth = rect.width;
        const containerHeight = rect.height;

        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, —á—Ç–æ–±—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –≤—ã—Ö–æ–¥–∏–ª –∑–∞ –∑–æ–Ω—É –≤–∏–¥–∏–º–æ—Å—Ç–∏ –æ–∫–Ω–∞
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 0 (—á—Ç–æ–±—ã –Ω–µ –≤—ã–π—Ç–∏ –≤–≤–µ—Ä—Ö –∏ –≤–ª–µ–≤–æ)
        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: —à–∏—Ä–∏–Ω–∞/–≤—ã—Å–æ—Ç–∞ –æ–∫–Ω–∞ –º–∏–Ω—É—Å —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏ –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø (10px)
        const padding = 10;

        if (x < padding) x = padding;
        if (y < padding) y = padding;

        if (x + containerWidth + padding > window.innerWidth) {
            x = window.innerWidth - containerWidth - padding;
        }

        if (y + containerHeight + padding > window.innerHeight) {
            y = window.innerHeight - containerHeight - padding;
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
        container.style.left = x + 'px';
        container.style.top = y + 'px';

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        originalPosition.x = x;
        originalPosition.y = y;
    });

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
    const btn = document.createElement('button');
    btn.id = 'aiSearch-btn';
    btn.title = 'AiSearch';
    btn.setAttribute('aria-label', 'AiSearch draggable button');
    btn.style.all = 'initial'; // —Å–±—Ä–æ—Å–∏–º —Å—Ç–∏–ª–∏ –∫–Ω–æ–ø–∫–∏
    btn.style.width = '40px';
    btn.style.height = '40px';
    btn.style.border = 'none';
    btn.style.backgroundImage = `url("${imageUrlLogo40X40}")`;
    btn.style.backgroundSize = 'contain';
    btn.style.backgroundRepeat = 'no-repeat';
    btn.style.backgroundPosition = 'center';
    btn.style.cursor = 'grab';
    btn.style.outline = 'none';
    btn.style.padding = '0px 0px';
    btn.style.color = 'white';
    btn.style.backgroundColor = 'white';
    btn.style.border = 'none';
    btn.style.borderRadius = '15px';


    container.appendChild(btn);
    document.body.appendChild(container);

    // Drag logic
    let isDragging = false;
    let dragOffsetX = 0;
    let dragOffsetY = 0;

    let wasDragged = false;

    btn.addEventListener('mousedown', (e) => {
        e.preventDefault();
        if (!lastSelectedEditableElement) {
            isDragging = true;
        }

        wasDragged = false; // —Å–±—Ä–æ—Å–∏–º —Ñ–ª–∞–≥ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ drag
        container.style.cursor = 'grabbing';

        // –°–º–µ—â–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–Ω–æ–ø–∫–∏
        const rect = container.getBoundingClientRect();
        dragOffsetX = e.clientX - rect.left;
        dragOffsetY = e.clientY - rect.top;

        // –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤–æ –≤—Ä–µ–º—è drag
        document.body.style.userSelect = 'none';
    });

    window.addEventListener('mousemove', (e) => {
        if (!isDragging) return;

        e.preventDefault();

        let newX = e.clientX - dragOffsetX;
        let newY = e.clientY - dragOffsetY;

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ —É—à–ª–∞ –∑–∞ —ç–∫—Ä–∞–Ω
        const maxX = window.innerWidth - container.offsetWidth;
        const maxY = window.innerHeight - container.offsetHeight;

        if (newX < 0) newX = 0;
        if (newY < 0) newY = 0;
        if (newX > maxX) newX = maxX;
        if (newY > maxY) newY = maxY;

        // –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å - —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ drag
        if (
            Math.abs(newX - parseInt(container.style.left || 0, 10)) > 2 ||
            Math.abs(newY - parseInt(container.style.top || 0, 10)) > 2
        ) {
            wasDragged = true;
        }

        container.style.left = newX + 'px';
        container.style.top = newY + 'px';
    });

    window.addEventListener('mouseup', (e) => {
        if (!isDragging) return;

        e.preventDefault();

        isDragging = false;
        container.style.cursor = 'grab';
        document.body.style.userSelect = '';

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ chrome.storage.sync
        const finalX = parseInt(container.style.left, 10);
        const finalY = parseInt(container.style.top, 10);

        originalPosition.x = finalX;
        originalPosition.y = finalY;

        chrome.storage.sync.set({
            [storageKey]: { x: finalX, y: finalY }
        }, () => {
            // console.log('Position saved', finalX, finalY);
        });
    });

    // –ü—Ä–∏ –∫–ª–∏–∫–µ (–±–µ–∑ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è) –≤—ã–∑—ã–≤–∞–µ–º initScenario
    btn.addEventListener('click', (e) => {
        // –ï—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è –∫–ª–∏–∫–∞ –Ω–µ –±—ã–ª–æ drag (–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ mouseup)
        if (!wasDragged) {
            initScenario();
        }
    });

    document.addEventListener('click', (event) => {
        handleSelectInputElm(event);
    });

    document.addEventListener('focusin', (event) => {
        handleSelectInputElm(event);
    });

    function handleSelectInputElm(event) {
        //alert();
        const target = event.target;

        if (target.id === 'aiSearch-btn') {
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –∫–ª–∏–∫ –ø–æ textarea –∏–ª–∏ contenteditable
        if (
            target.tagName.toLowerCase() === 'textarea'
            || target.getAttribute('contenteditable') === 'true'
            || document.querySelector('.kix-canvas-tile-content')
        ) {
            // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–ª–∞–≤–Ω–æ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä
            if (moveBackTimeout) {
                clearTimeout(moveBackTimeout);
                moveBackTimeout = null;
            }
            //isDragging = false;
            // –°–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —Ü–µ–Ω—Ç—Ä –±—ã–ª –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
            const buttonWidth = container.offsetWidth;
            const buttonHeight = container.offsetHeight;

            let newLeft = event.clientX - buttonWidth / 2;
            let newTop = event.clientY - buttonHeight / 2;

            // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ —ç–∫—Ä–∞–Ω
            const maxX = window.innerWidth - buttonWidth;
            const maxY = window.innerHeight - buttonHeight;

            if (newLeft < 0) newLeft = 0;
            if (newTop < 0) newTop = 0;
            if (newLeft > maxX) newLeft = maxX;
            if (newTop > maxY) newTop = maxY;

            container.style.left = newLeft + 'px';
            container.style.top = (newTop + 40) + 'px';

            lastSelectedEditableElement = target;
            lastInputElmInitExecuteTask = lastSelectedEditableElement;

            //console.log('click ' + lastSelectedEditableElement);
            //console.log(lastInputElmInitExecuteTask);
        } else {
            if (lastSelectedEditableElement) {
                // –í–æ–∑–≤—Ä–∞—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Å –ø–ª–∞–≤–Ω—ã–º –ø–µ—Ä–µ—Ö–æ–¥–æ–º
                if (moveBackTimeout) clearTimeout(moveBackTimeout);

                moveBackTimeout = setTimeout(() => {
                    container.style.left = originalPosition.x + 'px';
                    container.style.top = originalPosition.y + 'px';
                }, 100); // —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ –∫–ª–∏–∫–∞–º–∏
                lastInputElmInitExecuteTask = lastSelectedEditableElement;
            }

            lastSelectedEditableElement = null;
        }
    }

    function initScenario() {
        modalScenario = document.getElementById('my-unique-modal-v1');

        if (!modalScenario) {
            createModal();
            modalScenario = document.getElementById('my-unique-modal-v1');
        }

        if (modalScenario.style.visibility !== 'visible') {
            modalScenario.style.visibility = 'visible';
        }

        let selectedText = window.getSelection().toString();

        let highlightedText = modalScenario.shadowRoot.querySelector('.highlighted-text');

        if (highlightedText) {
            highlightedText.value = selectedText;
        }

        if (
            lastInputElmInitExecuteTask
            && lastTaskContent
        ) {
            let pasteButton = modalScenario.shadowRoot.querySelector('.paste-button');
            pasteButton.style.display = 'block';
        }
    }

    function createModal() {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const modalId = 'my-unique-modal-v1';
        if (document.getElementById(modalId)) {
            // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ç–∞–∫–æ–µ –æ–∫–Ω–æ - —É–¥–∞–ª–∏—Ç—å
            document.getElementById(modalId).remove();
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const selectedText = window.getSelection().toString();

        // –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –æ—Ç —Å—Ç–∏–ª–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Shadow DOM —á—Ç–æ–±—ã —Å—Ç–∏–ª–∏ –Ω–µ "–ø—Ä–æ–±–∏–≤–∞–ª–∏—Å—å"
        const container = document.createElement('div');
        container.id = modalId;
        Object.assign(container.style, {
            position: 'fixed',
            top: '0',
            left: '0',
            width: '100vw',
            height: '100vh',
            backgroundColor: 'transparent',
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            zIndex: '2147483647', // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–π z-index
            pointerEvents: 'none',
        });

        // –°–æ–∑–¥–∞–µ–º shadow root –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ —Å—Ç–∏–ª–µ–π
        const shadowRoot = container.attachShadow({ mode: 'open' });

        // –°–æ–∑–¥–∞–µ–º CSS
        const style = document.createElement('style');
        style.textContent = `
        * {
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }
        .modal {
            position: relative;
            background: white;
            border-radius: 8px;
            width: 600px;
            max-width: 90vw;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.3);
            display: flex;
            flex-direction: column;
            pointer-events: auto;
            gap: 10px;
        }
        .highlighted-text {
            border: 1px solid #cccc00;
            padding: 10px;
            min-height: 40px;
            white-space: pre-wrap;
            overflow-wrap: break-word;
            user-select: text;
            color: black;
            max-height: 300px;
            overflow-y: auto;
        }
        textarea {
            width: 100%;
            height: 100px;
            resize: vertical;
            font-family: monospace;
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
        button {
            cursor: pointer;
            padding: 8px 12px;
            border: none;
            background-color: #007bff;
            color: white;
            font-weight: 600;
            border-radius: 4px;
            transition: background-color 0.2s ease;
        }
        button:hover {
            background-color: #0056b3;
        }
        .btn-group {
            display: flex;
            gap: 10px;
        }
        .exceptions, .result {
            min-height: 30px;
            padding: 8px;
            border-radius: 4px;
            font-family: monospace;
            white-space: pre-wrap;
            overflow-wrap: break-word;
        }
        .exceptions {
            background-color: #ffe6e6;
            color: #d8000c;
            border: 1px solid #d8000c;
            display: none;
        }
        .result {
            background-color: white;
            color: black;
            border: 1px solid #006400;
            max-height: 300px;
            overflow-y: auto;
            display: none;
        }
        button.close-button {
            position: absolute;
            top: -2px;
            right: -2px;
            background: transparent;
            padding: 0;
            border: none;
            color: black;
        }
        /* –í–∫–ª–∞–¥–∫–∏ */
        .tabs {
            display: flex;
            border-bottom: 1px solid #ccc;
            margin-bottom: 10px;
        }
        .tab {
            padding: 8px 16px;
            cursor: pointer;
            user-select: none;
            border-radius: 6px 6px 0 0;
            border: 1px solid transparent;
            border-bottom: none;
            background-color: #eee;
            font-weight: 600;
        }
        .tab.active {
            background-color: white;
            border-color: #ccc #ccc white;
            color: black;
        }
        .tab-content {
            display: none;
        }
        .tab-content.active {
            display: block;
        }
        .tab-files {
            height: 200px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #666;
            font-style: italic;
            border: 1px dashed #ccc;
            border-radius: 4px;
        }
    `;

        // –°–∞–º–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.createElement('div');
        modal.className = 'modal';

        const closeButton = document.createElement('button');
        closeButton.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" fill="currentColor" class="bi bi-x-circle" viewBox="0 0 16 16">
  <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16"/>
  <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708"/>
</svg>`;

        closeButton.classList.add('close-button');

        const checkboxWithoutContext = document.createElement('input');
        checkboxWithoutContext.className = 'checkbox-without-context';
        checkboxWithoutContext.type = 'checkbox';

        const labelWithoutContext = document.createElement('label');
        labelWithoutContext.textContent = '–ù–µ —É—á–∏—Ç—ã–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç';
        labelWithoutContext.prepend(checkboxWithoutContext);

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        const tabsContainer = document.createElement('div');
        tabsContainer.className = 'tabs';

        const tabAISearch = document.createElement('div');
        tabAISearch.className = 'tab active';
        tabAISearch.textContent = '–ö–æ–Ω—Ç–µ–Ω—Ç';

        const tabFiles = document.createElement('div');
        tabFiles.className = 'tab';
        tabFiles.textContent = '–§–∞–π–ª—ã';

        tabsContainer.append(tabAISearch, tabFiles);

        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤–∫–ª–∞–¥–æ–∫
        const contentAISearch = document.createElement('div');
        contentAISearch.className = 'tab-content active';

        const contentFiles = document.createElement('div');
        contentFiles.className = 'tab-content';
        contentFiles.innerHTML = `<div class="tab-files">–ü—É—Å—Ç–æ</div>`;

        // 1) –±–ª–æ–∫ —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ø–∏—à–µ–º "–ù–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")
        const highlightedBlock = document.createElement('textarea');
        highlightedBlock.className = 'highlighted-text';
        highlightedBlock.textContent = selectedText || '';
        highlightedBlock.placeholder = '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ß—Ç–æ–±—ã —Å—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç ‚Äî –≤—ã–¥–µ–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç—É—Ç.';
        highlightedBlock.rows = 3;

        // 2) —Ç–µ–∫—Å—Ç–∞—Ä–µ–∞
        const textarea = document.createElement('textarea');
        textarea.placeholder = '–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å...';

        // 3) –∫–Ω–æ–ø–∫–∞ "–î–µ–ª–∞–π"
        const doButton = document.createElement('button');
        doButton.textContent = '–î–µ–ª–∞–π';

        // 4) –±–ª–æ–∫ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        const exceptionsBlock = document.createElement('div');
        exceptionsBlock.className = 'exceptions';
        exceptionsBlock.textContent = ''; // –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø—É—Å—Ç–æ

        // 5) –±–ª–æ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        const resultBlock = document.createElement('div');
        resultBlock.className = 'result';
        resultBlock.textContent = ''; // –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø—É—Å—Ç–æ
        resultBlock.contentEditable = true;

        // 6) –¥–≤–µ –∫–Ω–æ–ø–∫–∏: "–í—Å—Ç–∞–≤–∏—Ç—å" –∏ "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å"
        const btnGroup = document.createElement('div');
        btnGroup.className = 'btn-group';

        const pasteButton = document.createElement('button');
        pasteButton.textContent = '–í—Å—Ç–∞–≤–∏—Ç—å';
        pasteButton.className = 'paste-button';
        pasteButton.style.display = 'none';

        const copyButton = document.createElement('button');
        copyButton.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å';
        copyButton.className = 'copy-button';
        copyButton.style.display = 'none';

        btnGroup.append(pasteButton, copyButton);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∞–π—Å–µ—á–∞—Ä—á–∞ –≤ –µ–≥–æ –≤–∫–ª–∞–¥–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        contentAISearch.append(
            highlightedBlock,
            labelWithoutContext,
            textarea,
            doButton,
            exceptionsBlock,
            resultBlock,
            btnGroup
        );

        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫–∏ –∏ –∏—Ö –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        modal.append(
            closeButton,
            tabsContainer,
            contentAISearch,
            contentFiles
        );

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å –∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤ shadow DOM
        shadowRoot.append(style, modal);

        // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        document.body.appendChild(container);

        modalScenario = document.getElementById('my-unique-modal-v1');

        // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
        function switchTab(tab) {
            // –æ—Ç–∫–ª—é—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã —É –≤–∫–ª–∞–¥–æ–∫
            tabsContainer.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
            modal.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));

            tab.classList.add('active');

            if (tab === tabAISearch) {
                contentAISearch.classList.add('active');
            } else if (tab === tabFiles) {
                let filesList = collectExternalFilesByType();
                contentFiles.innerHTML = ''; // –æ—á–∏—â–∞–µ–º

                // –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤
                const fileTypes = ['images', 'videos', 'scripts', 'styles', 'others'];
                const filtersContainer = document.createElement('div');
                filtersContainer.style.marginBottom = '10px';

                fileTypes.forEach(type => {
                    const btn = document.createElement('button');
                    btn.textContent = type.charAt(0).toUpperCase() + type.slice(1);
                    btn.dataset.type = type;
                    btn.style.marginRight = '5px';
                    btn.onclick = () => {
                        renderFilesList(filesList, btn.dataset.type);
                        // –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –∫–Ω–æ–ø–æ–∫
                        filtersContainer.querySelectorAll('button').forEach(b => b.classList.remove('active'));
                        btn.classList.add('active');
                    };
                    filtersContainer.appendChild(btn);
                });
                contentFiles.appendChild(filtersContainer);

                // –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
                const listContainer = document.createElement('div');
                listContainer.id = 'fileListContainer';
                listContainer.style.maxHeight = '400px';
                listContainer.style.overflowY = 'auto';
                contentFiles.appendChild(listContainer);

                // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã (–∏–ª–∏ –ø–µ—Ä–≤—ã–π)
                filtersContainer.querySelector('button').click();

                contentFiles.classList.add('active');
            }
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –Ω–∞ –≤–∫–ª–∞–¥–∫–∞—Ö
        tabAISearch.addEventListener('click', () => switchTab(tabAISearch));
        tabFiles.addEventListener('click', () => switchTab(tabFiles));

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        closeButton.addEventListener('click', () => {
            container.style.visibility = 'hidden';
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–µ–ª–∞–π"
        doButton.addEventListener('click', () => {
            exceptionsBlock.textContent = '';
            resultBlock.textContent = '';
            const inputText = textarea.value.trim();

            const pageText = document.body.innerText;

            if (!inputText) {
                resultBlock.textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.';
                resultBlock.style.display = 'block';
                return;
            }

            let prompt = inputText;

            if (!checkboxWithoutContext.checked) {
                if (highlightedBlock.value === '') {
                    prompt = pageText + "\n" + prompt;
                } else {
                    prompt = highlightedBlock.value + "\n" + prompt;
                }
            }

            chrome.runtime.sendMessage({ type: "task", prompt: prompt }, response => {
                if (response && response.error) {
                    console.error("Error response:", response.error);
                }
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å—Ç–∞–≤–∫–∏
        pasteButton.addEventListener('click', async () => {
            if ('value' in lastInputElmInitExecuteTask) {
                lastInputElmInitExecuteTask.value = resultBlock.innerText;
            } else {
                lastInputElmInitExecuteTask.innerHTML = resultBlock.innerText;

                const changeEvent = new Event('change', {
                    bubbles: true,
                    cancelable: true,
                });

                lastInputElmInitExecuteTask.dispatchEvent(changeEvent);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        copyButton.addEventListener('click', async () => {
            exceptionsBlock.textContent = '';
            try {
                if (!resultBlock.textContent) {
                    throw new Error('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π, –Ω–µ—á–µ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å');
                }
                await navigator.clipboard.writeText(resultBlock.innerText);
            } catch (e) {
                exceptionsBlock.textContent = '–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞: ' + (e.message || e);
            }
        });

        textarea.addEventListener('focus', async () => {
            container.style.pointerEvents = 'auto';
        });

        textarea.addEventListener('blur', async () => {
            container.style.pointerEvents = 'none';
        });

        textarea.addEventListener('keydown', (event) => {
            event.stopPropagation();
        });
    }

    let accumulateResponseContent = '';
    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {

        if (message.type === 'data') {
            accumulateResponseContent += message.data;
            const resultBlock = modalScenario.shadowRoot.querySelector('.result');
            const copyButton = modalScenario.shadowRoot.querySelector('.copy-button');

            if (resultBlock.style.display !== 'block') {
                resultBlock.style.display = 'block';
            }

            if (copyButton.style.display !== 'block') {
                copyButton.style.display = 'block';
            }

            if (lastInputElmInitExecuteTask) {
                let pasteButton = modalScenario.shadowRoot.querySelector('.paste-button');
                pasteButton.style.display = 'block';
            }

            resultBlock.innerHTML = accumulateResponseContent;
        }

        if (message.type === 'task_error') {
            // –§–æ—Ä–º–∏—Ä—É–µ–º HTML –∏–∑ –æ—à–∏–±–æ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ .exceptions
            let exceptionsContainer = modalScenario.shadowRoot.querySelector('.exceptions');
            exceptionsContainer.style.display = 'block';
            if (message.message && message.message["–æ—à–∏–±–∫–∞"]) {
                // message.message["–æ—à–∏–±–∫–∞"] - –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ —Å –æ—à–∏–±–∫–∞–º–∏ (—Ç–∞–º –º–æ–≥—É—Ç –±—ã—Ç—å —É–∂–µ HTML-—Å—Å—ã–ª–∫–∏)
                let errorsHtml = message.message["–æ—à–∏–±–∫–∞"].map(err => `${err}<br>`).join('');
                exceptionsContainer.innerHTML = errorsHtml;
            } else {
                exceptionsContainer.innerHTML = '<p>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞</p>';
            }
        }

        if (message.type === 'task_complete') {
            lastTaskContent = accumulateResponseContent;
            accumulateResponseContent = '';
        }
    });
}
